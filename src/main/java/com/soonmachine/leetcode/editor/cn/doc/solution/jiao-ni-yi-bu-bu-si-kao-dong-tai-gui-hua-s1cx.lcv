# 视频讲解

[【基础算法精讲 18】](https://www.bilibili.com/video/BV16Y411v7Y6/)。如果这个视频对你有帮助，欢迎一键三连！

> APP 用户需要分享到 wx 打开。

# 一 · 递归搜索 + 保存计算结果 = 记忆化搜索

* [sol1-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        target += sum(nums)
        if target < 0 or target % 2:
            return 0
        target //= 2

        @cache  # 记忆化搜索
        def dfs(i, c):
            if i < 0:
                return 1 if c == 0 else 0
            if c < nums[i]:
                return dfs(i - 1, c)
            return dfs(i - 1, c) + dfs(i - 1, c - nums[i])
        return dfs(len(nums) - 1, target)
```

* [sol1-Java]

```java
class Solution {
    private int[] nums;
    private int[][] cache;

    public int findTargetSumWays(int[] nums, int target) {
        for (int x : nums) target += x;
        if (target < 0 || target % 2 == 1) return 0;
        target /= 2;

        this.nums = nums;
        int n = nums.length;
        cache = new int[n][target + 1];
        for (int i = 0; i < n; i++)
            Arrays.fill(cache[i], -1); // -1 表示没用访问过
        return dfs(n - 1, target);
    }

    private int dfs(int i, int c) {
        if (i < 0) return c == 0 ? 1 : 0;
        if (cache[i][c] != -1) return cache[i][c];
        if (c < nums[i]) return cache[i][c] = dfs(i - 1, c);
        return cache[i][c] = dfs(i - 1, c) + dfs(i - 1, c - nums[i]);
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int> &nums, int target) {
        target += accumulate(nums.begin(), nums.end(), 0);
        if (target < 0 || target % 2) return 0;
        target /= 2;

        int n = nums.size(), cache[n][target + 1];
        memset(cache, -1, sizeof(cache)); // -1 表示没用访问过
        function<int(int, int)> dfs = [&](int i, int c) -> int {
            if (i < 0) return c == 0;
            int &res = cache[i][c];
            if (res != -1) return res;
            if (c < nums[i]) return res = dfs(i - 1, c);
            return res = dfs(i - 1, c) + dfs(i - 1, c - nums[i]);
        };
        return dfs(n - 1, target);
    }
};
```

* [sol1-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    for _, x := range nums {
        target += x
    }
    if target < 0 || target%2 == 1 {
        return 0
    }
    target /= 2

    n := len(nums)
    cache := make([][]int, n)
    for i := range cache {
        cache[i] = make([]int, target+1)
        for j := range cache[i] {
            cache[i][j] = -1 // -1 表示没用访问过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, c int) (res int) {
        if i < 0 {
            if c == 0 {
                return 1
            }
            return 0
        }
        C := &cache[i][c]
        if *C != -1 {
            return *C
        }
        defer func() { *C = res }()
        if c < nums[i] {
            return dfs(i-1, c)
        }
        return dfs(i-1, c) + dfs(i-1, c-nums[i])
    }
    return dfs(n-1, target)
}
```

### 复杂度分析

- 时间复杂度：$O(n\cdot(\textit{target}+S))$，其中 $n$ 为 $\textit{nums}$ 的长度，$S$ 为 $\textit{nums}$ 的元素之和。
- 空间复杂度：$O(n\cdot(\textit{target}+S))$。

# 二 · 1:1 翻译成递推

* [sol2-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        target += sum(nums)
        if target < 0 or target % 2:
            return 0
        target //= 2

        n = len(nums)
        f = [[0] * (target + 1) for _ in range(n + 1)]
        f[0][0] = 1
        for i, x in enumerate(nums):
            for c in range(target + 1):
                if c < x:
                    f[i + 1][c] = f[i][c]
                else:
                    f[i + 1][c] = f[i][c] + f[i][c - x]
        return f[n][target]
```

* [sol2-Java]

```java
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        for (int x : nums) target += x;
        if (target < 0 || target % 2 == 1) return 0;
        target /= 2;

        int n = nums.length;
        int[][] f = new int[n + 1][target + 1];
        f[0][0] = 1;
        for (int i = 0; i < n; ++i)
            for (int c = 0; c <= target; ++c)
                if (c < nums[i]) f[i + 1][c] = f[i][c];
                else f[i + 1][c] = f[i][c] + f[i][c - nums[i]];
        return f[n][target];
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int> &nums, int target) {
        target += accumulate(nums.begin(), nums.end(), 0);
        if (target < 0 || target % 2) return 0;
        target /= 2;

        int n = nums.size(), f[n + 1][target + 1];
        memset(f, 0, sizeof(f));
        f[0][0] = 1;
        for (int i = 0; i < n; ++i)
            for (int c = 0; c <= target; ++c)
                if (c < nums[i]) f[i + 1][c] = f[i][c];
                else f[i + 1][c] = f[i][c] + f[i][c - nums[i]];
        return f[n][target];
    }
};
```

* [sol2-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    for _, x := range nums {
        target += x
    }
    if target < 0 || target%2 == 1 {
        return 0
    }
    target /= 2

    n := len(nums)
    f := make([][]int, n+1)
    for i := range f {
        f[i] = make([]int, target+1)
    }
    f[0][0] = 1
    for i, x := range nums {
        for c := 0; c <= target; c++ {
            if c < x {
                f[i+1][c] = f[i][c]
            } else {
                f[i+1][c] = f[i][c] + f[i][c-x]
            }
        }
    }
    return f[n][target]
}
```

### 复杂度分析

- 时间复杂度：$O(n\cdot(\textit{target}+S))$，其中 $n$ 为 $\textit{nums}$ 的长度，$S$ 为 $\textit{nums}$ 的元素之和。
- 空间复杂度：$O(n\cdot(\textit{target}+S))$。

# 三 · 空间优化：两个数组（滚动数组）

* [sol3-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        target += sum(nums)
        if target < 0 or target % 2:
            return 0
        target //= 2

        n = len(nums)
        f = [[0] * (target + 1) for _ in range(2)]
        f[0][0] = 1
        for i, x in enumerate(nums):
            for c in range(target + 1):
                if c < x:
                    f[(i + 1) % 2][c] = f[i % 2][c]
                else:
                    f[(i + 1) % 2][c] = f[i % 2][c] + f[i % 2][c - x]
        return f[n % 2][target]
```

* [sol3-Java]

```java
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        for (int x : nums) target += x;
        if (target < 0 || target % 2 == 1) return 0;
        target /= 2;

        int n = nums.length;
        int[][] f = new int[2][target + 1];
        f[0][0] = 1;
        for (int i = 0; i < n; ++i)
            for (int c = 0; c <= target; ++c)
                if (c < nums[i]) f[(i + 1) % 2][c] = f[i % 2][c];
                else f[(i + 1) % 2][c] = f[i % 2][c] + f[i % 2][c - nums[i]];
        return f[n % 2][target];
    }
}
```

* [sol3-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int> &nums, int target) {
        target += accumulate(nums.begin(), nums.end(), 0);
        if (target < 0 || target % 2) return 0;
        target /= 2;

        int n = nums.size(), f[2][target + 1];
        memset(f, 0, sizeof(f));
        f[0][0] = 1;
        for (int i = 0; i < n; ++i)
            for (int c = 0; c <= target; ++c)
                if (c < nums[i]) f[(i + 1) % 2][c] = f[i % 2][c];
                else f[(i + 1) % 2][c] = f[i % 2][c] + f[i % 2][c - nums[i]];
        return f[n % 2][target];
    }
};
```

* [sol3-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    for _, x := range nums {
        target += x
    }
    if target < 0 || target%2 == 1 {
        return 0
    }
    target /= 2

    n := len(nums)
    f := [2][]int{make([]int, target+1), make([]int, target+1)}
    f[0][0] = 1
    for i, x := range nums {
        for c := 0; c <= target; c++ {
            if c < x {
                f[(i+1)%2][c] = f[i%2][c]
            } else {
                f[(i+1)%2][c] = f[i%2][c] + f[i%2][c-x]
            }
        }
    }
    return f[n%2][target]
}
```

### 复杂度分析

- 时间复杂度：$O(n\cdot(\textit{target}+S))$，其中 $n$ 为 $\textit{nums}$ 的长度，$S$ 为 $\textit{nums}$ 的元素之和。
- 空间复杂度：$O(\textit{target}+S)$。

# 四 · 空间优化：一个数组

* [sol4-Python3]

```py
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        target += sum(nums)
        if target < 0 or target % 2:
            return 0
        target //= 2

        f = [1] + [0] * target
        for x in nums:
            for c in range(target, x - 1, -1):
                f[c] += f[c - x]
        return f[target]
```

* [sol4-Java]

```java
class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        for (int x : nums) target += x;
        if (target < 0 || target % 2 == 1) return 0;
        target /= 2;

        int[] f = new int[target + 1];
        f[0] = 1;
        for (int x : nums)
            for (int c = target; c >= x; --c)
                f[c] += f[c - x];
        return f[target];
    }
}
```

* [sol4-C++]

```cpp
class Solution {
public:
    int findTargetSumWays(vector<int> &nums, int target) {
        target += accumulate(nums.begin(), nums.end(), 0);
        if (target < 0 || target % 2) return 0;
        target /= 2;

        int f[target + 1];
        memset(f, 0, sizeof(f));
        f[0] = 1;
        for (int x : nums)
            for (int c = target; c >= x; --c)
                f[c] += f[c - x];
        return f[target];
    }
};
```

* [sol4-Go]

```go
func findTargetSumWays(nums []int, target int) int {
    for _, x := range nums {
        target += x
    }
    if target < 0 || target%2 == 1 {
        return 0
    }
    target /= 2

    f := make([]int, target+1)
    f[0] = 1
    for _, x := range nums {
        for c := target; c >= x; c-- {
            f[c] += f[c-x]
        }
    }
    return f[target]
}
```

### 复杂度分析

- 时间复杂度：$O(n\cdot(\textit{target}+S))$，其中 $n$ 为 $\textit{nums}$ 的长度，$S$ 为 $\textit{nums}$ 的元素之和。
- 空间复杂度：$O(\textit{target}+S)$。

